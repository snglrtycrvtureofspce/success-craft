public class ContactsManagerController {
    
    public List<Contact> Contacts; 
    // New contact
    public Contact NewContact {get;set;}
    // For rendered popup window
	public Boolean displayPopup {get;set;}
    // Searching text
    public String searchText {get;set;}
    // Selected Contact.Id
	public String selectedContactId {get;set;}
    // Sort by field
    public String sortOrder {get;set;}
    // Order
    private String ascendingOrDescending;    
    // Keeps track of the offset
    private Integer counter = 0;  
    // Sets the page size or number of rows
    private Integer listSize = 10;
    // Used to show user the total size of the list
    public Integer totalSize {get;set;}
    
    // Constructor
    public ContactsManagerController() {
        
        // Initialization properties
        this.NewContact = new Contact(); 
        this.sortOrder = 'Name';
        this.searchText = '';
        this.selectedContactId = '';
		this.ascendingOrDescending = ' ASC ';        
    }
    
    // Condition for SOQL
    private String condition() {
        if (this.searchText != '') {
            return 
                'WHERE FirstName LIKE \'%' + searchText + '%\' ' +
            	'OR LastName LIKE \'%' + searchText + '%\' ';
        }
        else{
            return '';
        }        
    }
    
    // Query contacts
	public List<Contact> getContacts() {
        try {
            List<Contact> Contacts = Database.query(
                'SELECT Id, Name, Email, Contact_Level__c, AccountId, OwnerId, CreatedById, CreatedDate ' +
                'FROM Contact ' + condition() +
                'ORDER BY ' + sortOrder + ascendingOrDescending + 'NULLS LAST ' +
                'LIMIT :listSize OFFSET :counter'
            );
            this.totalSize = Database.countQuery('SELECT Count() ' + 'FROM Contact ' + condition());
            return Contacts;           
        } catch(System.Exception e) {
            ApexPages.addMessages(e);
            totalSize = 0;
            return null;
        }
	}
    
    // Search button
    public PageReference searchContact() {
        // Default offset
        counter = 0;
    	return null;
    }

    // Set order
    public void sortByField() { 
        if(ascendingOrDescending == ' ASC ') {
            ascendingOrDescending = ' DESC ';
        }
        else {
            ascendingOrDescending = ' ASC ';
        }        
    }
    
    // New Contact on new page
    public PageReference NewContact() {
		PageReference NewContactPage = new PageReference('/apex/NewContactPage');
		NewContactPage.setRedirect(true);		
		return NewContactPage;
    }
    
    // Delete selected contact
    public PageReference deleteSelectedContact() {
        // Сначала сделал через assignTo apex:param, потом перестало работать (((,
        // добавил проверку через getParameters
        if (selectedContactId == '') {            
            // get value apex:param name="ContactId"
            this.selectedContactId = System.currentPageReference().getParameters().get('ContactId');
        }
        try {
        	// Select contact for delete
        	// why list, less exception)
            List<Contact> ContactRecords = [SELECT Id FROM Contact WHERE Id = :selectedContactId LIMIT 1];
        	if (ContactRecords.size() > 0) {
          		delete ContactRecords[0];                
        	}
            return null;
        } catch(System.Exception e) {
            ApexPages.addMessages(e);
            return null;
        }        
    }
    
    /*** Work with popup ***/
    // Show popup window
    public void showPopup() { 
    	displayPopup = true; 
    }
    
	// Hide popup window
  	public void closePopup() { 
        displayPopup = false; 
    }
    
    // Save new contact by popup window
    public PageReference saveNewContact() {
    	try {
            insert NewContact;
            closePopup();
            return null;
        } catch(System.Exception e) {
            ApexPages.addMessages(e);
            return null;
        }
    }
    /*** ***/
    
	/*** Work with paginate ***/
    // User clicked beginning
    public PageReference Beginning() { 
    	counter = 0;
      	return null;
    }

     // User clicked previous button
   	public PageReference Previous() {
      	counter -= listSize;
      	return null;
   	}

    // User clicked next button
   	public PageReference Next() { 
      	counter += listSize;
      	return null;
   	}

 	// User clicked end
   	public PageReference End() { 
      	counter = totalSize - math.mod(totalSize, listSize);
      	return null;
   	}

   	// This will disable the beginning and previous buttons
    public Boolean getDisableBeginningPrevious() {
      	if (counter > 0) return false;
        else return true;
   	}

   	// This will disable the next and end buttons
    public Boolean getDisableNextEnd() {
      	if (counter + listSize < totalSize) return false; else return true;
   	}

    // Current page
   	public Integer getPageNumber() {
      	return counter/listSize + 1;
   	}
    
    // Count pages
   	public Integer getTotalPages() {
      	if (math.mod(totalSize, listSize) > 0) {
         	return totalSize/listSize + 1;
      	} else {
         	return (totalSize/listSize);
      	}
   	}
	/*** ***/
    
}